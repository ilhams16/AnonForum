@using System.Text.Json
@using AnonForum.BLL
@using AnonForum.BLL.DTOs.User
@{
	ViewData["Title"] = "Home Page";
	HashSet<int> uniquePostIDs = new HashSet<int>();
	var user = new UserDTO();
	@if (Context.Session.GetString("userLogin") != null)
	{
		string? userDto = Context.Session.GetString("userLogin");
		user = JsonSerializer.Deserialize<UserDTO>(userDto);
	}
	var search = Context.Request.Query["search"];
	var category = Context.Request.Query["category"];
	var commentBLL = new CommentBLL();
	string message = TempData["Message"] as string;
	List<string> images = new List<string>();
	foreach (var post in Model.Posts)
	{
		images.Add(post.Image);
	}

}

@model AnonForum.MVC.Models.PostAndCategoryViewModel

<div class="row">
	<div class="col-lg-12">
		<!-- Basic Card Example -->
		<div class="card shadow mb-4 p-2">
			@if (!string.IsNullOrEmpty(message))
			{
				<div id="successMessage" class="alert alert-success" role="alert">
					@message
				</div>
			}
			@if (Context.Session.GetString("userLogin") != null)
			{
				<div class="card-header py-3">
					<h6 class="m-0 font-weight-bold">
						Welcome @user.Username
					</h6>
				</div>
			}
			<div class="card-body">
				<div class="d-flex">
					@using (Html.BeginForm("Index", "Home", FormMethod.Get))
					{
						<p class="d-flex justify-content-between mt-3">
							<input type="text" id="search" class="form-control mx-1" name="search" placeholder="Search by title" value="@search" />
							<select id="category" name="category" class="form-control mx-1">
								<option value="">All Categories</option>
								@foreach (var categoryItem in Model.Categories)
								{
									<option value="@categoryItem.PostCategoryID">@categoryItem.Name</option>
								}
							</select>
							<input type="submit" class="btn btn-primary btn-sm mx-2" value="Search" />
						</p>
					}
				</div>
				@if (Context.Session.GetString("userLogin") != null)
				{
					<button type="button" class="btn btn-primary mb-3" data-toggle="modal" data-target="#addPostModal">
						Add New Post
					</button>
					@Html.Partial("_AddNewPostModal", new AnonForum.MVC.Models.CreatePostViewModel { Categories = Model.Categories })
				}

				@* @foreach (var post in Model.Posts.Where(p => p.Image != null)) { *@
					<div id="carousel" class="carousel slide" data-ride="carousel">
					<!-- Indicators -->
					@* <ol class="carousel-indicators">
						@for (int i = 0; i < images.Count; i++)
						{
							<li data-target="#carousel" data-slide-to="@i" @(i == 0 ? "class=\"active\"" : "")></li>
						}
					</ol> *@

					<!-- Slides -->
					@* <div class="carousel-inner">
							@for (int i = 0; i < Model.Posts.Where(p => p.Image != null).Count(); i++)
						{
							<div class="carousel-item @(i == 0 ? "active" : "")">
								<div class="d-flex justify-content-center align-items-center h-100">
									<i class="fas fa-spinner fa-spin"></i> <!-- Font Awesome loading spinner -->
								</div>
								<img class="d-block w-50 h-50" src="/Image/PostImages/@images[i]" alt="Image @(i + 1)" onload="this.parentElement.removeChild(this.previousElementSibling)">
							</div>
						}
					</div> *@

					<!-- Controls -->
					<a class="carousel-control-prev" href="#carousel" role="button" data-slide="prev">
						<span class="carousel-control-prev-icon" aria-hidden="true"></span>
						<span class="sr-only">Previous</span>
					</a>
					<a class="carousel-control-next" href="#carousel" role="button" data-slide="next">
						<span class="carousel-control-next-icon" aria-hidden="true"></span>
						<span class="sr-only">Next</span>
					</a>
				</div>	
				@* } *@




				<div class="row">
					@foreach (var post in Model.Posts)
					{
						// Add the post ID to the HashSet to mark it as processed
						uniquePostIDs.Add(post.PostID);
						<div class="mb-4">
							<div class="card">
								<div class="card-body text-center">
									<div class="d-flex justify-content-start align-content-center align-items-center">
										<div class="mx-1"><img src="/Image/UserImages/@post.UserPost.UserImage" width="30" alt="User Image" /></div>
										<div class="mx-1">@post.UserPost.Username</div>
									</div>
									<h5 class="card-title"><a href="/Home/Details/@post.PostID" style="text-decoration: none !important;">@post.Title</a></h5>
									<p class="card-text text-start">@post.PostText</p>
									@if (!string.IsNullOrEmpty(post.Image))
									{
										<div class="m-auto">
											<img src="/Image/PostImages/@post.Image" class="img-fluid rounded w-50 h-50" alt="Post Image" />
										</div>
									}
									<div class="d-flex justify-content-between mt-3">
										<p class="card-text m-1"><strong>Category:</strong> @post.Category.Name</p>
										<p class="card-text text-muted m-1">Published on: @post.TimeStamp.ToString("dddd, dd MMMM yyyy HH:m")</p>
									</div>
									<div class="d-flex m-2">
										<div class="d-flex m-2 align-items-center align-content-center">
											@if (post.Likes.Contains(user.UserID))
											{
												@using (Html.BeginForm("Unlike", "Home", FormMethod.Post))
												{
													@Html.Hidden("currentPostID", post.PostID)
													@Html.Hidden("currentUserID", user.UserID)
													<button type="submit" class="mx-1 btn btn-primary btn-sm">Unlike</button>
												}
											}
											else
											{
												@using (Html.BeginForm("Like", "Home", FormMethod.Post))
												{
													@Html.Hidden("currentPostID", post.PostID)
													@Html.Hidden("currentUserID", user.UserID)

													<button type="submit" class="mx-1 btn btn-secondary btn-sm">Like</button>
												}
											}
											<div class="mx-1 h4">@post.TotalLikes</div>
										</div>
										<div class="d-flex mx-2 align-items-center align-content-center">
											@if (post.Dislikes.Contains(user.UserID))
											{
												@using (Html.BeginForm("Undislike", "Home", FormMethod.Post))
												{
													@Html.Hidden("currentPostID", post.PostID)
													@Html.Hidden("currentUserID", user.UserID)
													<button type="submit" class="mx-1 btn btn-danger btn-sm">Undislike</button>
												}
											}
											else
											{
												@using (Html.BeginForm("Dislike", "Home", FormMethod.Post))
												{
													@Html.Hidden("currentPostID", post.PostID)
													@Html.Hidden("currentUserID", user.UserID)

													<button type="submit" class="mx-1 btn btn-secondary btn-sm">Dislike</button>
												}
											}
											<div class="mx-1 h4">@post.TotalDislikes</div>
										</div>
										<div class="d-flex mx-2 align-items-center align-content-center">
											@if (Context.Session.GetString("userLogin") != null)
											{
												<button type="button" class="btn btn-info btn-sm" data-toggle="modal" data-target="#addCommentModal_@post.PostID" data-postid="@post.PostID">
													Comment
												</button>
												@Html.Partial("_AddCommentModal", new AnonForum.BLL.DTOs.Comment.CreateCommentDTO { PostID = @post.PostID })
											}
										</div>
									</div>
									<div class="card-footer rounded-3">
										@if (Model.Comments != null)
										{
											var postComments = commentBLL.GetAllCommentbyPostID(post.PostID);
											@* var postComments = Model.Comments.Where(c => c.PostID == post.PostID); *@
											if (postComments.Any())
											{
												@foreach (var comment in postComments)
												{
													<div class="border-bottom">
														<div class="d-flex m-2 justify-content-start align-items-center">
															<div class="mx-1 img-fluid"><img src="/Image/UserImages/@comment.UserImage" width="30" alt="User Image" /></div>
															<div class="mx-1 align-items-center align-content-center">@comment.Username</div>
														</div>
														<div class="d-block border rounded-3">
															<div class="text-start p-2 m-1">@comment.Comment</div>
															<div class="text-end text-muted m-1">@comment.TimeStamp.ToString("dddd, dd MMMM yyyy HH:mm")</div>
														</div>
														<div class="d-flex m-2">
															<div class="d-flex m-2 align-items-center align-content-center">
																@if (comment.Likes.Contains(user.UserID))
																{
																	@using (Html.BeginForm("UnlikeComment", "Home", FormMethod.Post))
																	{
																		@Html.Hidden("currentCommentID", comment.CommentID)
																		@Html.Hidden("currentPostID", post.PostID)
																		@Html.Hidden("currentUserID", user.UserID)
																		<button type="submit" class="mx-1 btn btn-primary btn-sm">Unlike</button>
																	}
																}
																else
																{
																	@using (Html.BeginForm("LikeComment", "Home", FormMethod.Post))
																	{
																		@Html.Hidden("currentCommentID", comment.CommentID)
																		@Html.Hidden("currentPostID", post.PostID)
																		@Html.Hidden("currentUserID", user.UserID)

																		<button type="submit" class="mx-1 btn btn-secondary btn-sm">Like</button>
																	}
																}
																<div class="mx-1 h4">@comment.TotalLikes</div>
															</div>
															<div class="d-flex mx-2 align-items-center align-content-center">
																@if (comment.Dislikes.Contains(user.UserID))
																{
																	@using (Html.BeginForm("UndislikeComment", "Home", FormMethod.Post))
																	{
																		@Html.Hidden("currentCommentID", comment.CommentID)
																		@Html.Hidden("currentPostID", post.PostID)
																		@Html.Hidden("currentUserID", user.UserID)
																		<button type="submit" class="mx-1 btn btn-danger btn-sm">Undislike</button>
																	}
																}
																else
																{
																	@using (Html.BeginForm("DislikeComment", "Home", FormMethod.Post))
																	{
																		@Html.Hidden("currentCommentID", comment.CommentID)
																		@Html.Hidden("currentPostID", post.PostID)
																		@Html.Hidden("currentUserID", user.UserID)

																		<button type="submit" class="mx-1 btn btn-secondary btn-sm">Dislike</button>
																	}
																}
																<div class="mx-1 h4">@comment.TotalDislikes</div>
															</div>
															<div class="d-flex mx-2 align-items-center align-content-center ms-auto">
																@if (user.UserID == comment.UserID)
																{
																	<div class="text-end">
																		<button type="button" class="btn btn-danger btn-sm" data-toggle="modal" data-target="#confirmDeleteCommentModal_@comment.CommentID" data-postid="@comment.CommentID">
																			Delete Comment
																		</button>
																	</div>
																	@Html.Partial("_ConfirmDeleteCommentModal", new AnonForum.BLL.DTOs.Comment.CommentDTO { CommentID = comment.CommentID })
																}
															</div>
														</div>
													</div>
												}
											}
											else
											{
												<p>No comments for this post.</p>
											}
										}
										else
										{
											<p>No comments available.</p>
										}
									</div>
									@if (user.UserID == post.UserID)
									{
										<div class="mt-3 text-end">
											<button type="button" class="btn btn-warning btn-sm edit-post-btn" data-toggle="modal" data-target="#editPostModal_@post.PostID" data-postid="@post.PostID">
												Edit Post
											</button>
											<button type="button" class="btn btn-danger btn-sm" data-toggle="modal" data-target="#confirmDeleteModal_@post.PostID" data-postid="@post.PostID">
												Delete Post
											</button>
										</div>
										@Html.Partial("_EditPostModal", new AnonForum.MVC.Models.EditPostModel { EditPostDTO = new AnonForum.BLL.DTOs.Post.EditPostDTO { PostID = post.PostID, Title = post.Title, PostText = post.PostText, PostCategoryID = post.PostCategoryID }, Categories = Model.Categories })
										@* @Html.Partial("_EditPostModal", new AnonForum.BLL.DTOs.Post.EditPostDTO { PostID = post.PostID, Title = post.Title, PostText = post.PostText, PostCategoryID = post.PostCategoryID }) *@
										@Html.Partial("_ConfirmDeleteModal", new AnonForum.BLL.DTOs.Post.PostDTO { PostID = post.PostID })
									}
								</div>
							</div>
						</div>
					}
				</div>

			</div>
			<div class="ms-auto me-3">
				<nav aria-label="Page navigation">
					<ul class="pagination">
						@if (Model.CurrentPage > 1)
						{
							<li class="page-item mx-1">
								<a class="page-link" href="@Url.Action("Index", new { page = 1, pageSize = Model.PageSize })" aria-label="First">
									<span aria-hidden="true">&laquo;&laquo;</span>
								</a>
							</li>
							<li class="page-item mx-1">
								<a class="page-link" href="@Url.Action("Index", new { page = Model.CurrentPage - 1, pageSize = Model.PageSize })" aria-label="Previous">
									<span aria-hidden="true">&laquo; Previous</span>
								</a>
							</li>
						}

						@if (Model.CurrentPage < Model.TotalPages)
						{
							<li class="page-item mx-1">
								<a class="page-link" href="@Url.Action("Index", new { page = Model.CurrentPage + 1, pageSize = Model.PageSize })" aria-label="Next">
									<span aria-hidden="true">Next &raquo;</span>
								</a>
							</li>
							<li class="page-item mx-1">
								<a class="page-link" href="@Url.Action("Index", new { page = Model.TotalPages, pageSize = Model.PageSize })" aria-label="Last">
									<span aria-hidden="true">&raquo;&raquo;</span>
								</a>
							</li>
						}
					</ul>
				</nav>

			</div>
		</div>

	</div>
</div>
@section Scripts {
	<script>
		$(document).ready(function () {
			// Show the success message
			$("#successMessage").fadeIn();

			// Automatically hide the success message after 5 seconds (adjust as needed)
			setTimeout(function () {
				$("#successMessage").fadeOut();
			}, 5000); // 5 seconds
		});
	</script>
}